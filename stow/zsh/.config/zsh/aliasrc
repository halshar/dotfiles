#!/usr/bin/env bash

alias ls="ls --color=auto --group-directories-first"
alias ll="ls -lh"
alias la="ls -lah"
alias lh="ls -ld .*"
alias rm="rm -i"
alias grep="grep --color=auto"
alias ds="du -sh ./* | sort -h; du -sh"
alias myip="curl https://ipinfo.io/ip;echo"
alias vim="nvim"
alias gwl="git worktree list"

# Function to create directory and cd into it
cnc() {
  mkdir -p "$1"
  cd "$1" || return
}

# Function to encrypt a file or directory using GPG
genc() {
  # Check if an argument is passed
  if [ $# -ne 1 ]; then
    echo "Usage: genc <file_or_directory>" >&2
    return 1
  fi

  # If the argument is file then directly encrypt it
  # else if it's directory then archive it and then encrypt
  # else return with error message
  if [ -f "$1" ]; then
    filename=$(basename "$1")
    encrypted_file="${filename}_$(date +'%d_%m_%Y').gpg"
    gpg --symmetric --no-symkey-cache --cipher-algo AES256 --output "$encrypted_file" "$1"
    echo "File '$filename' encrypted successfully. Encrypted file saved as '$encrypted_file'"
  elif [ -d "$1" ]; then
    directory=$(basename "$1")
    archived_dir="${directory}_$(date +'%d_%m_%Y').tar"
    encrypted_dir="${archived_dir}.gpg"
    tar -cf "$archived_dir" "$1"
    gpg --symmetric --no-symkey-cache --cipher-algo AES256 --output "$encrypted_dir" "$archived_dir"
    rm -f "$archived_dir"
    echo "Directory '$directory' contents encrypted successfully. Encrypted file saved as '$encrypted_dir'"
  else
    echo "Error: '$1' is neither a file nor a directory" >&2
    return 1
  fi
}

# Function to decrypt an encrypted file or directory using GPG
gdec() {
  # Check if an argument is passed
  if [ $# -ne 1 ]; then
    echo "Usage: gdec <encrypted_file_or_directory>" >&2
    return 1
  fi

  # If the argument is file then directly decrypt it
  # else if it's directory then unarchive it and then decrypt
  # else return with error message
  if [ -f "$1" ] && [[ "$1" == *.tar.gpg ]]; then
    decrypted_dir="decrypted_$(basename "$1" .tar.gpg)"
    gpg --decrypt --no-symkey-cache "$1" | tar -xvf -
    echo "Directory '$decrypted_dir' decrypted successfully"
  elif [ -f "$1" ]; then
    gpg --no-symkey-cache "$1"
    echo "File '$1' decrypted successfully"
  else
    echo "inside else"
    echo "Error: '$1' is not a valid encrypted file or directory" >&2
    return 1
  fi
}

# Function to search and cd into all directories using fzf
fcd() {
  local dir
  dir=$(fd --hidden --type directory "${1:-}" 2>/dev/null | fzf +m --reverse) || return
  cd "$dir" || return
}

# Function to view specified logs in oneline
function glog() {
  local count="${1:-11}"
  git log --oneline -n "$count"
}

# Function to fetch changes from specified git remote
function gfetch() {
  local remote="${1:-origin}"
  git fetch --prune --prune-tags "$remote"
}

# Function to push to specified git remote
function gpush() {
  local remote="${1:-origin}"
  git push "$remote" HEAD
}

# Function to pull from specified git remote
function gpull() {
  local remote="${1:-origin}"
  local branch="${2:-$(git rev-parse --abbrev-ref HEAD)}"
  git pull "$remote" "$branch"
}

# Function to rebase to specified git reference
function gbase() {
  local ref="${1:-0}"
  if [[ "$ref" =~ ^[0-9]+$ ]]; then
    ref="HEAD~$ref"
  fi

  git rebase -i "$ref"
}

# Function to clone a bare git repository
function gbclone() {
  local repo_url="$1"
  local repo_name="${2:-$(basename -s .git "$repo_url")}"

  if [ -z "$repo_url" ]; then
    echo "Error: Repository URL is required"
    return 1
  fi

  # clone the repository in bare mode
  if git clone --bare "$repo_url" "$repo_name"; then
    echo "Bare clone successful. Updating fetch configuration"

    # change into the cloned directory
    cd "$repo_name" || return 1

    # update the fetch configuration
    git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"

    echo "Fetch configuration updated successfully"
  else
    echo "Error: Failed to clone repository"
    return 1
  fi
}

# Function to create new git worktree
function gwa() {
  local dir_name="$1"
  local ref="${2:-origin/master}"

  if [ -z "$dir_name" ]; then
    echo "error: directory name is required"
    return 1
  fi

  # If branch already exists then use it else create new one
  if git rev-parse --verify "$dir_name" >/dev/null 2>&1; then
    echo "Branch '$dir_name' already exists, checking out existing branch"
    git worktree add "$dir_name" "$dir_name"
  else
    git worktree add -b "$dir_name" "$dir_name" "$ref"
  fi
}

# Function to preview git commits
gci() {
  _gitLog() {
    git log \
      --graph \
      --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr% C(auto)%an" "$@"
  }

  local _gitHash="echo {} | grep -o '[a-f0-9]\{7\}' | head -1 | tr -d '\n'"
  local _viewGitLog="$_gitHash | xargs -I % sh -c 'git show --color=always % | delta'"

  _gitLog "$@" |
    fzf --reverse --tiebreak=index --no-multi \
      --ansi --preview="$_viewGitLog" \
      --header "enter: view commit, C-y: copy hash, C-o: toggle-preview" \
      --bind "ctrl-s:toggle-sort,ctrl-r:toggle-preview-wrap,ctrl-o:toggle-preview" \
      --bind "ctrl-u:page-up,ctrl-d:page-down" \
      --bind "ctrl-f:preview-page-up,ctrl-b:preview-page-down" \
      --bind "enter:execute:$_viewGitLog | less -R" \
      --bind "ctrl-y:execute:$_gitHash | xsel --clipboard"
}

# Function to update git fetch refspec for given remote
gufc() {
  # use the first argument otherwise default to origin
  local remote=${1:-origin}

  # update the fetch configuration for the given remote
  git config --local "remote.${remote}.fetch" "+refs/heads/*:refs/remotes/${remote}/*"
}

# Function to select the kubernetes configuration file
kconf() {
  local selected_file
  selected_file="$(find ~/.kube -maxdepth 1 -type f | fzf +m)"

  # Check if a file was selected, if yes then export it
  if [[ -n "$selected_file" ]]; then
    export KUBECONFIG="$selected_file"
  fi

  # Check if KUBECONFIG is set and non-empty
  if [[ -n "$KUBECONFIG" ]]; then
    echo "KUBECONFIG: $KUBECONFIG"
  else
    echo "KUBECONFIG: <empty>"
  fi
}

# Function to activate podman completions for the given shell
apsc() {
  local shell="${1:-zsh}"
  # shellcheck disable=SC1090
  source <(podman completion "${shell}")
  echo "activated podman ${shell} completion"
}

# Function to activate docker completions for the given shell
adsc() {
  local shell="${1:-zsh}"
  # shellcheck disable=SC1090
  source <(docker completion "${shell}")
  echo "activated docker ${shell} completion"
}

# Function to activate kubectl completions for the given shell
aksc() {
  local shell="${1:-zsh}"
  # shellcheck disable=SC1090
  source <(kubectl completion "${shell}")
  echo "activated kubectl ${shell} completion"
}
